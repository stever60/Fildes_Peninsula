# only use this if havent set the colours: dend <- color_labels(dend, k = 10)
# The same as:labels_colors(dend)  <- get_leaves_branches_col(dend)
plot(dend, horiz=TRUE, axes=TRUE)
#get a list of cluster group members
dend_list <- get_subdendrograms(dend, 10)
lapply(dend_list, labels)
# Visualize kmeans clustering using repel = TRUE to avoid overplotting
kta.sqrt.scaled <- kta.sqrt.Z[ME_n]
head(kta.sqrt.scaled)
km.res <- kmeans(kta.sqrt.scaled, 5, nstart = 5)
fviz_cluster(km.res, geom = c("point"), kta.sqrt.scaled, ellipse.type = "euclid",
palette = "RdRlBu", ggtheme = theme_minimal())
BrBG1 <- colorRampPalette(brewer.pal(10, "BrBG"))(nb.cols)
BrBG1
nb.cols <- 10
BrBG1 <- colorRampPalette(brewer.pal(10, "BrBG"))(nb.cols)
BrBG1
#clear plot window
dev.off()
# Color as a function of the cluster - using hc as defined above - need to define colours to match number of groups
par(mar=c(4,1,1,7))
# Run clustering with just data matrix
kta.matrix <- as.matrix(kta.sqrt.Z[, ME_n])
head(kta.matrix)
# Link row names from original matrix
rownames(kta.matrix) <- kta.sqrt.Z$LongID
dend <- as.dendrogram(hclust(d = dist(x = kta.matrix), "ward.D2"))
#par(mfrow = c(1,2), mar = c(2,2,1,0))
dend <- dend %>%
color_branches(k = 10) %>%
set("branches_lwd", 0.75) %>%
set("branches_lty", c(1,2,1,2,1,2,1,2,1,2)) %>%
set("labels_cex", 0.05) %>%
set("labels_col", value = BrBG1, k=10) %>%
set("branches_k_color", value = BrBG1, k=10)
# use this if havent set the colours: dend <- color_labels(dend, k = 10)
# code is the same as:labels_colors(dend)  <- get_leaves_branches_col(dend)
p10 <- plot(dend, horiz=TRUE, axes=TRUE)
nb.cols <- 10
RdYlBu2 <- colorRampPalette(brewer.pal(10, "RdYlBu"))(nb.cols)
RdYlBu2
#clear plot window
dev.off()
# Color as a function of the cluster - using hc as defined above - need to define colours to match number of groups
par(mar=c(4,1,1,7))
# Run clustering with just data matrix
kta.matrix <- as.matrix(kta.sqrt.Z[, ME_n])
head(kta.matrix)
# Link row names from original matrix
rownames(kta.matrix) <- kta.sqrt.Z$LongID
dend <- as.dendrogram(hclust(d = dist(x = kta.matrix), "ward.D2"))
#par(mfrow = c(1,2), mar = c(2,2,1,0))
dend <- dend %>%
color_branches(k = 10) %>%
set("branches_lwd", 0.75) %>%
set("branches_lty", c(1,2,1,2,1,2,1,2,1,2)) %>%
set("labels_cex", 0.05) %>%
set("labels_col", value = RdYlBu2, k=10) %>%
set("branches_k_color", value = RdYlBu2, k=10)
# use this if havent set the colours: dend <- color_labels(dend, k = 10)
# code is the same as:labels_colors(dend)  <- get_leaves_branches_col(dend)
p10 <- plot(dend, horiz=TRUE, axes=TRUE)
p10
nb.cols <- 10
BrBG2 <- colorRampPalette(brewer.pal(10, "BrBG"))(nb.cols)
BrBG2
fviz_gap_stat(gap_stat)
# USE THIS ONE - optimal number of clusters using Gap Statistic Method - bootstrapping MCMC approach (Tibshirani et al., 2001)
gap_stat <- clusGap(kta.sqrt.Z[, ME_n], FUN = kmeans, nstart = 25,
K.max = 15, B = 50)
p9 <- fviz_gap_stat(gap_stat)
p9
#get a list of cluster group members
dend_list <- get_subdendrograms(dend, 10)
lapply(dend_list, labels)
# Figure 7
ggarrange(p9, p10,
common.legend = FALSE,
align = c("h"),
legend = "right",
labels = c("A", "B"),
font.label = list(size = 16, color = "black"),
ncol = 1, nrow = 2)
#clear plot window
dev.off()
# Color as a function of the cluster - using hc as defined above - need to define colours to match number of groups
par(mar=c(4,1,1,7))
# Run clustering with just data matrix
kta.matrix <- as.matrix(kta.sqrt.Z[, ME_n])
head(kta.matrix)
# Link row names from original matrix
rownames(kta.matrix) <- kta.sqrt.Z$LongID
dend <- as.dendrogram(hclust(d = dist(x = kta.matrix), "ward.D2"))
#par(mfrow = c(1,2), mar = c(2,2,1,0))
dend <- dend %>%
color_branches(k = 10) %>%
set("branches_lwd", 0.75) %>%
set("branches_lty", c(1,2,1,2,1,2,1,2,1,2)) %>%
set("labels_cex", 0.05) %>%
set("labels_col", value = BrBG2, k=10) %>%
set("branches_k_color", value = BrBG2, k=10)
# use this if havent set the colours: dend <- color_labels(dend, k = 10)
# code is the same as:labels_colors(dend)  <- get_leaves_branches_col(dend)
p10 <- plot(dend, horiz=TRUE, axes=TRUE)
p10
#par(mfrow = c(1,2), mar = c(2,2,1,0))
dend <- dend %>%
color_branches(k = 10) %>%
set("branches_lwd", 0.75) %>%
set("branches_lty", c(1,2,1,2,1,2,1,2,1,2)) %>%
set("labels_cex", 0.05) %>%
set("labels_col", value = RdYlBu2, k=10) %>%
set("branches_k_color", value = RdYlBu2, k=10)
# use this if havent set the colours: dend <- color_labels(dend, k = 10)
# code is the same as:labels_colors(dend)  <- get_leaves_branches_col(dend)
p10 <- plot(dend, horiz=TRUE, axes=TRUE)
p10
# Figure 7
ggarrange(p9, p10,
common.legend = FALSE,
align = c("h"),
legend = "right",
labels = c("A", "B"),
font.label = list(size = 16, color = "black"),
ncol = 1, nrow = 2)
plot_grid(
p9, p10,
labels = "AUTO", ncol = 1
)
p10
p10 <- plot(dend, horiz=TRUE, axes=TRUE)
p10
plot_grid(
p9, p10,
align = "h", axis = "tb",
nrow = 1, rel_widths = c(1, 2)
)
p10 <- plot(dend, horiz=TRUE, axes=TRUE)
p9
p9 +theme(text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12)
)
#get a list of cluster group members
dend_list <- get_subdendrograms(dend, 10)
lapply(dend_list, labels)
# 4) RHY filtered data to file - choose this one for the
kta <- EPMA_RHY_filter
kta <- kta[,(var_sub_n),drop=FALSE]
# remove ANT and DI data - only 2 rows of each- not enough data for correlation and PCA in ACID dataset
#kta <- kta[!kta$Group=='ANT',]
#kta <- kta[!kta$Group=='DI',]
kta
#centre variables and  Z-scores using scale() function - for standardised (scaled) and centred PCA analysis - values are mean of 0 and +/-1 of 1 std dev
#copy the original filename to a new filename and then apply a z-score transform to it, plot it
kta.Z <- kta
kta.Z[, ME_n] <- scale(kta[ME_n], center = TRUE, scale = TRUE)
kta.Z[is.na(kta.Z)] <- 0
kta.Z
head(kta.Z)
plot(kta.Z[, ME_n], pch=19, cex = 0.05)
# Transform the %kta data by sqrt = %kta sq root-transformed, cuberoot = %TSBN cuberoot transformed
kta.sqrt <- kta
kta.sqrt[, ME_n] <- sqrt (kta.sqrt[ME_n])
kta.sqrt[is.na(kta.sqrt)] <- 0
head(kta.sqrt)
plot(kta.sqrt[, ME_n], pch=19, cex = 0.05)
# Calculate Z-scores of sqrt transformed data
#copy the original sqrt filename to a new filename and then apply a z-score transform to it, plot it
kta.sqrt.Z <- kta.sqrt
kta.sqrt.Z[, ME_n] <- scale(kta.sqrt[ME_n], center = TRUE, scale = TRUE)
head(kta.sqrt.Z)
plot(kta.sqrt.Z[, ME_n], pch=19, cex = 0.05)
# PCA  --------------------------------------------------------------------
## Visualising PCA with the "factoextra" package and ggplot2
#clear plot window
dev.off()
# select dataset to take forward to PCA analysis
pca.kta <- kta.sqrt.Z [ME_n]
head(pca.kta)
plot(pca.kta, pch=19, cex = 0.05)
# Make PCA not including Unit columns (1 in csv file) - depth is ID
p <- prcomp(pca.kta,  scale = TRUE)
# The coordinates for PCA are contained within the prcomp object as a matrix:res.pca$x
# Make PC variable matrix
r = eigen(cov(pca.kta))
p$rotation
# Percentage of variance expl
ev <- p$sdev^2
var_percent <-ev[1:4] / sum(ev)
var_percent
# Plot as a scree plot
pca_scree <- fviz_eig(p) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
theme(text=element_text(size=12, face = "plain"),
axis.text=element_text(size=12),
axis.title=element_text(size=12,face="plain"),
plot.margin = unit(c(1,1,1,1), "cm")
)
pca_scree
# Clear plot window and plot a Screeplot of PC Inertia
if(!is.null(dev.list())) dev.off()
layout(matrix(1:1, ncol=1))
p_inertia <- screeplot(p)
# Use the scree plots above and below to assess how many PC to keep - usually PC1, 2, 3.
# Show data being used run
PC14 <- p$x[,1:4]
head(PC14)
#Show summary stats for variables using standardize package - and standardize data (to finish)
x.stats <- summary(PC14)
x.stats
# Plot the first 2-4 principal components, so use p$x[,1] (PCA 1) and p$x[,2] (PCA 2) etc. to select the relevant data.
# Plot datapoints to check - use change axes to = 1,3 for PC1 vs PC3
# cos2 = quality of individual points on the factor map
# contib = relative contribution of individual datapoints to PCA score
fviz_pca_ind(p, geom = c("point", "text"), axes = c(1,2), labelsize = 2, col.ind = "cos2",
gradient.cols = c("grey90","#2E9FDF", "#FC4E07"),
repel = FALSE, title = "PCA - Biplot with depths labelled") +
theme(text = element_text(size = 10),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10))
#Create a barplot for loadings on PC1 axis - can change this
if(!is.null(dev.list())) dev.off()
#Loadings plots for PC1 only
barplot(p$rotation[,1], main="PC 1 Loadings Plot", las=2)
#the loadings for the variables for our first principal component (PC) are p$rotation[,1], while the second principal component loadings are p$rotation[,2] and so on
n.pc1 <- ifelse(p$rotation[,1] > 0, yes=-0.01, no=p$rotation[,1]-0.01)
#fix the labelling - create a numeric object ("n.pc1") containing values which will position text underneath the bars in the bar chart using the ifelse() function. The first argument p$rotation[,1] > 0 sets the condition or test for ifelse() to meet. The yes argument will return the value specified if the condition is met, while the no argument will return the value specified if it fails to meet the condition.
c.pc1 <- ifelse(p$rotation[,1] > 0, yes="blue", no="red2")
#add colours and replot
par(mar=c(8,3,2,1)) # Set margins
b1 <- barplot(p$rotation[,1], main="PC 1 Loadings Plot", col=c.pc1, las=2, axisnames=FALSE)
abline(h=0) # Add horizontal line
text(x=b1, y=n.pc1, labels=names(p$rotation[,1]), adj=1, srt=90, xpd=FALSE) # Add variable names
#use axisnames=FALSE to stop barplot() plotting them automatically
#this creates the bar chart as an object so that we can extract the "midpoints" of each bar to correctly position the variable names when using the text() function.
#adj=1 sets the alignment of the variable names to right align.
#srt=90 changes the direction of the text to a 90 degree angle (vertical).
#xpd=TRUE tells R that it can plot the text outside the plot region, and within the figure region
# Plot all PC axes loadings together --------------------------------------
if(!is.null(dev.list())) dev.off()
# Change colour of bar plot
c.pc1 <- ifelse(p$rotation[,1] > 0, yes="blue", no="red2")
c.pc2 <- ifelse(p$rotation[,2] > 0, "blue", "red2")
c.pc3 <- ifelse(p$rotation[,3] > 0, "blue", "red2")
c.pc4 <- ifelse(p$rotation[,4] > 0, "blue", "red2")
# Get position for variable names
n.pc1 <- ifelse(p$rotation[,1] > 0, -0.01, p$rotation[,1]-0.01)
n.pc2 <- ifelse(p$rotation[,2] > 0, -0.01, p$rotation[,2]-0.01)
n.pc3 <- ifelse(p$rotation[,3] > 0, -0.01, p$rotation[,3]-0.01)
n.pc4 <- ifelse(p$rotation[,4] > 0, -0.01, p$rotation[,4]-0.01)
# plot PC1 and PC2 together
# Plot PC1-4 loadings - 8 cm wide plot ------------------------------------
layout(matrix(2:4, ncol=1)) # Set up layout
## Translate 8 cm graph plot size *from* cm *to* inches:
plotinch <- 8 / cm(1) # -> 8 cm  is  3.149608 inches but R converts to 3.149606 -
#par(mai=c(4,4,3,4), pin=c(plotinch, plotinch/2), xaxs='i') #plot size in inches
par(mai=c(0.1,0.1,0.2,0.2), pin=c(plotinch, plotinch/2),  mgp=c(2,0.5,0), xaxs='i', omi=c(0,0,0,0))
#dev.off() #need to include this to write to pdf file fully - will delete screen plot
#par(mar=c(2,4,4,2), oma=c(8,0,0,0)) # Set up margins
# Plot PC 1, 2, 3 & 4 together add variable names
b1 <- barplot(p$rotation[,1], main="PC 1 Loadings Plot", col=c.pc1, las=3, axisnames=FALSE)
abline(h=0)
text(x=b1, y=ifelse(p$rotation[,1] > 0, -0.01, p$rotation[,1]-0.01), labels=names(p$rotation[,1]), adj=1, srt=90, xpd=NA)
b2 <- barplot(p$rotation[,2], main="PC 2 Loadings Plot", col=c.pc2, las=3, axisnames=FALSE)
abline(h=0)
text(x=b2, y=ifelse(p$rotation[,2] > 0, -0.01, p$rotation[,2]-0.01), labels=names(p$rotation[,2]), adj=1, srt=90, xpd=NA)
b3 <- barplot(p$rotation[,3], main="PC 3 Loadings Plot", col=c.pc3, las=3, axisnames=FALSE)
abline(h=0)
text(x=b3, y=ifelse(p$rotation[,3] > 0, -0.01, p$rotation[,3]-0.01), labels=names(p$rotation[,3]), adj=1, srt=90, xpd=NA)
b4 <- barplot(p$rotation[,4], main="PC 4 Loadings Plot", col=c.pc3, las=3, axisnames=FALSE)
abline(h=0)
text(x=b3, y=ifelse(p$rotation[,4] > 0, -0.01, p$rotation[,4]-0.01), labels=names(p$rotation[,4]), adj=1, srt=90, xpd=NA)
# plot PC1 and PC2 together
# Plot PC1-4 loadings - 8 cm wide plot ------------------------------------
layout(matrix(2:4, ncol=1)) # Set up layout
## Translate 8 cm graph plot size *from* cm *to* inches:
plotinch <- 8 / cm(1) # -> 8 cm  is  3.149608 inches but R converts to 3.149606 -
#par(mai=c(4,4,3,4), pin=c(plotinch, plotinch/2), xaxs='i') #plot size in inches
par(mai=c(0.1,0.1,0.2,0.2), pin=c(plotinch, plotinch/2),  mgp=c(2,0.5,0), xaxs='i', omi=c(0,0,0,0))
#dev.off() #need to include this to write to pdf file fully - will delete screen plot
#par(mar=c(2,4,4,2), oma=c(8,0,0,0)) # Set up margins
# Plot PC1-4 loadings - 8 cm wide plot ------------------------------------
layout(matrix(1:4, ncol=1)) # Set up layout
## Translate 8 cm graph plot size *from* cm *to* inches:
plotinch <- 8 / cm(1) # -> 8 cm  is  3.149608 inches but R converts to 3.149606 -
#par(mai=c(4,4,3,4), pin=c(plotinch, plotinch/2), xaxs='i') #plot size in inches
par(mai=c(0.1,0.1,0.2,0.2), pin=c(plotinch, plotinch/2),  mgp=c(2,0.5,0), xaxs='i', omi=c(0,0,0,0))
#dev.off() #need to include this to write to pdf file fully - will delete screen plot
#par(mar=c(2,4,4,2), oma=c(8,0,0,0)) # Set up margins
# Plot PC 1, 2, 3 & 4 together add variable names
b1 <- barplot(p$rotation[,1], main="PC 1 Loadings Plot", col=c.pc1, las=3, axisnames=FALSE)
abline(h=0)
text(x=b1, y=ifelse(p$rotation[,1] > 0, -0.01, p$rotation[,1]-0.01), labels=names(p$rotation[,1]), adj=1, srt=90, xpd=NA)
b2 <- barplot(p$rotation[,2], main="PC 2 Loadings Plot", col=c.pc2, las=3, axisnames=FALSE)
abline(h=0)
text(x=b2, y=ifelse(p$rotation[,2] > 0, -0.01, p$rotation[,2]-0.01), labels=names(p$rotation[,2]), adj=1, srt=90, xpd=NA)
b3 <- barplot(p$rotation[,3], main="PC 3 Loadings Plot", col=c.pc3, las=3, axisnames=FALSE)
abline(h=0)
text(x=b3, y=ifelse(p$rotation[,3] > 0, -0.01, p$rotation[,3]-0.01), labels=names(p$rotation[,3]), adj=1, srt=90, xpd=NA)
b4 <- barplot(p$rotation[,4], main="PC 4 Loadings Plot", col=c.pc3, las=3, axisnames=FALSE)
abline(h=0)
text(x=b3, y=ifelse(p$rotation[,4] > 0, -0.01, p$rotation[,4]-0.01), labels=names(p$rotation[,4]), adj=1, srt=90, xpd=NA)
# Plot variable lines and data on chosen PC axes biplots ----------------------------------
fviz_pca_var(p, axes = c(3,2), col.var = "contrib",
gradient.cols = c("brown", "green"), #"Blues",
ggtheme = theme_minimal(),
title = "PCA - Variable Plot")
# Final graph -------------------------------------------------------------
# Biplot of individuals and variables
# Keep only the labels for variables
# Change the color by groups, add ellipses
pca1 <- fviz_pca_biplot(p, axes = c(3,2), label = "var", col.var = "blue",
#gradient.cols = c("brown", "blue"), #"Blues",
habillage=kta$Group,
addEllipses=TRUE, ellipse.level=0.68,
palette = SAM2,
#c("blue", "grey50", "black", "salmon"),
title = "PC3/PC2 and Variables (68% CI)",
ggtheme = theme_classic()) +
theme(text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
pca1
# 4) RHY filtered data to file - choose this one for the
kta <- EPMA_RHY_filter
kta <- kta[,(var_sub_n),drop=FALSE]
# remove ANT and DI data - only 2 rows of each- not enough data for correlation and PCA in ACID dataset
kta <- kta[!kta$Group=='ANT',]
kta <- kta[!kta$Group=='DI',]
kta
centre variables and  Z-scores using scale() function - for standardised (scaled) and centred PCA analysis - values are mean of 0 and +/-1 of 1 std dev
#copy the original filename to a new filename and then apply a z-score transform to it, plot it
kta.Z <- kta
kta.Z[, ME_n] <- scale(kta[ME_n], center = TRUE, scale = TRUE)
kta.Z[is.na(kta.Z)] <- 0
kta.Z
head(kta.Z)
plot(kta.Z[, ME_n], pch=19, cex = 0.05)
# Transform the %kta data by sqrt = %kta sq root-transformed, cuberoot = %TSBN cuberoot transformed
kta.sqrt <- kta
kta.sqrt[, ME_n] <- sqrt (kta.sqrt[ME_n])
kta.sqrt[is.na(kta.sqrt)] <- 0
head(kta.sqrt)
plot(kta.sqrt[, ME_n], pch=19, cex = 0.05)
# Calculate Z-scores of sqrt transformed data
#copy the original sqrt filename to a new filename and then apply a z-score transform to it, plot it
kta.sqrt.Z <- kta.sqrt
kta.sqrt.Z[, ME_n] <- scale(kta.sqrt[ME_n], center = TRUE, scale = TRUE)
head(kta.sqrt.Z)
plot(kta.sqrt.Z[, ME_n], pch=19, cex = 0.05)
## Visualising PCA with the "factoextra" package and ggplot2
#clear plot window
dev.off()
# select dataset to take forward to PCA analysis
pca.kta <- kta.sqrt.Z [ME_n]
head(pca.kta)
plot(pca.kta, pch=19, cex = 0.05)
# Make PCA not including Unit columns (1 in csv file) - depth is ID
p <- prcomp(pca.kta,  scale = TRUE)
# The coordinates for PCA are contained within the prcomp object as a matrix:res.pca$x
# Make PC variable matrix
r = eigen(cov(pca.kta))
p$rotation
# Percentage of variance explained by the first four PC dimensions
ev <- p$sdev^2
var_percent <-ev[1:4] / sum(ev)
var_percent
# Plot as a scree plot
pca_scree <- fviz_eig(p) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
theme(text=element_text(size=12, face = "plain"),
axis.text=element_text(size=12),
axis.title=element_text(size=12,face="plain"),
plot.margin = unit(c(1,1,1,1), "cm")
)
pca_scree
# PC axes loadings --------------------------------------------------------
#Create a barplot for loadings on PC1 axis - can change this
if(!is.null(dev.list())) dev.off()
#Loadings plots for PC1 only
barplot(p$rotation[,1], main="PC 1 Loadings Plot", las=2)
#the loadings for the variables for our first principal component (PC) are p$rotation[,1], while the second principal component loadings are p$rotation[,2] and so on
n.pc1 <- ifelse(p$rotation[,1] > 0, yes=-0.01, no=p$rotation[,1]-0.01)
#fix the labelling - create a numeric object ("n.pc1") containing values which will position text underneath the bars in the bar chart using the ifelse() function. The first argument p$rotation[,1] > 0 sets the condition or test for ifelse() to meet. The yes argument will return the value specified if the condition is met, while the no argument will return the value specified if it fails to meet the condition.
c.pc1 <- ifelse(p$rotation[,1] > 0, yes="blue", no="red2")
#add colours and replot
par(mar=c(8,3,2,1)) # Set margins
b1 <- barplot(p$rotation[,1], main="PC 1 Loadings Plot", col=c.pc1, las=2, axisnames=FALSE)
abline(h=0) # Add horizontal line
text(x=b1, y=n.pc1, labels=names(p$rotation[,1]), adj=1, srt=90, xpd=FALSE) # Add variable names
#use axisnames=FALSE to stop barplot() plotting them automatically
#this creates the bar chart as an object so that we can extract the "midpoints" of each bar to correctly position the variable names when using the text() function.
#adj=1 sets the alignment of the variable names to right align.
#srt=90 changes the direction of the text to a 90 degree angle (vertical).
#xpd=TRUE tells R that it can plot the text outside the plot region, and within the figure region
# Plot all PC axes loadings together --------------------------------------
if(!is.null(dev.list())) dev.off()
# Change colour of bar plot
c.pc1 <- ifelse(p$rotation[,1] > 0, yes="blue", no="red2")
c.pc2 <- ifelse(p$rotation[,2] > 0, "blue", "red2")
c.pc3 <- ifelse(p$rotation[,3] > 0, "blue", "red2")
c.pc4 <- ifelse(p$rotation[,4] > 0, "blue", "red2")
# Get position for variable names
n.pc1 <- ifelse(p$rotation[,1] > 0, -0.01, p$rotation[,1]-0.01)
n.pc2 <- ifelse(p$rotation[,2] > 0, -0.01, p$rotation[,2]-0.01)
n.pc3 <- ifelse(p$rotation[,3] > 0, -0.01, p$rotation[,3]-0.01)
n.pc4 <- ifelse(p$rotation[,4] > 0, -0.01, p$rotation[,4]-0.01)
# plot PC1 and PC2 together
# Plot PC1-4 loadings - 8 cm wide plot ------------------------------------
layout(matrix(1:4, ncol=1)) # Set up layout
## Translate 8 cm graph plot size *from* cm *to* inches:
plotinch <- 8 / cm(1) # -> 8 cm  is  3.149608 inches but R converts to 3.149606 -
#par(mai=c(4,4,3,4), pin=c(plotinch, plotinch/2), xaxs='i') #plot size in inches
par(mai=c(0.1,0.1,0.2,0.2), pin=c(plotinch, plotinch/2),  mgp=c(2,0.5,0), xaxs='i', omi=c(0,0,0,0))
#dev.off() #need to include this to write to pdf file fully - will delete screen plot
#par(mar=c(2,4,4,2), oma=c(8,0,0,0)) # Set up margins
# Plot PC 1, 2, 3 & 4 together add variable names
b1 <- barplot(p$rotation[,1], main="PC 1 Loadings Plot", col=c.pc1, las=3, axisnames=FALSE)
abline(h=0)
text(x=b1, y=ifelse(p$rotation[,1] > 0, -0.01, p$rotation[,1]-0.01), labels=names(p$rotation[,1]), adj=1, srt=90, xpd=NA)
b2 <- barplot(p$rotation[,2], main="PC 2 Loadings Plot", col=c.pc2, las=3, axisnames=FALSE)
abline(h=0)
text(x=b2, y=ifelse(p$rotation[,2] > 0, -0.01, p$rotation[,2]-0.01), labels=names(p$rotation[,2]), adj=1, srt=90, xpd=NA)
b3 <- barplot(p$rotation[,3], main="PC 3 Loadings Plot", col=c.pc3, las=3, axisnames=FALSE)
abline(h=0)
text(x=b3, y=ifelse(p$rotation[,3] > 0, -0.01, p$rotation[,3]-0.01), labels=names(p$rotation[,3]), adj=1, srt=90, xpd=NA)
b4 <- barplot(p$rotation[,4], main="PC 4 Loadings Plot", col=c.pc3, las=3, axisnames=FALSE)
abline(h=0)
text(x=b3, y=ifelse(p$rotation[,4] > 0, -0.01, p$rotation[,4]-0.01), labels=names(p$rotation[,4]), adj=1, srt=90, xpd=NA)
# Final graph -------------------------------------------------------------
# Biplot of individuals and variables
# Keep only the labels for variables
# Change the color by groups, add ellipses
pca1 <- fviz_pca_biplot(p, axes = c(3,2), label = "var", col.var = "blue",
#gradient.cols = c("brown", "blue"), #"Blues",
habillage=kta$Group,
addEllipses=TRUE, ellipse.level=0.68,
palette = SAM2,
#c("blue", "grey50", "black", "salmon"),
title = "PC3/PC2 and Variables (68% CI)",
ggtheme = theme_classic()) +
theme(text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
pca1
# Biplot of individuals and variables
# Keep only the labels for variables
# Change the color by groups, add ellipses
pca1 <- fviz_pca_biplot(p, axes = c(2,3), label = "var", col.var = "blue",
#gradient.cols = c("brown", "blue"), #"Blues",
habillage=kta$Group,
addEllipses=TRUE, ellipse.level=0.68,
palette = SAM2,
#c("blue", "grey50", "black", "salmon"),
title = "PC2/PC3 and Variables (68% CI)",
ggtheme = theme_classic()) +
theme(text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
pca1
# Biplot of individuals and variables
# Keep only the labels for variables
# Change the color by groups, add ellipses
pca1 <- fviz_pca_biplot(p, axes = c(3,2), label = "var", col.var = "blue",
#gradient.cols = c("brown", "blue"), #"Blues",
habillage=kta$Group,
addEllipses=TRUE, ellipse.level=0.68,
palette = SAM2,
#c("blue", "grey50", "black", "salmon"),
title = "PC2/PC3 and Variables (68% CI)",
ggtheme = theme_classic()) +
theme(text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
pca1
#clear plot window
dev.off()
# Color as a function of the cluster - using hc as defined above - need to define colours to match number of groups
par(mar=c(4,1,1,7))
# Run clustering with just data matrix
kta.matrix <- as.matrix(kta.sqrt.Z[, ME_n])
head(kta.matrix)
# Link row names from original matrix
rownames(kta.matrix) <- kta.sqrt.Z$LongID
dend <- as.dendrogram(hclust(d = dist(x = kta.matrix), "ward.D2"))
#par(mfrow = c(1,2), mar = c(2,2,1,0))
dend <- dend %>%
color_branches(k = 10) %>%
set("branches_lwd", 0.75) %>%
set("branches_lty", c(1,2,1,2,1,2,1,2,1,2)) %>%
set("labels_cex", 0.05) %>%
set("labels_col", value = BrBG2, k=10) %>%
set("branches_k_color", value = BrBG2, k=10)
# use this if havent set the colours: dend <- color_labels(dend, k = 10)
# code is the same as:labels_colors(dend)  <- get_leaves_branches_col(dend)
p10 <- plot(dend, horiz=TRUE, axes=TRUE)
#par(mfrow = c(1,2), mar = c(2,2,1,0))
dend <- dend %>%
color_branches(k = 10) %>%
set("branches_lwd", 0.75) %>%
set("branches_lty", 1) %>%
set("labels_cex", 0.05) %>%
set("labels_col", value = BrBG2, k=10) %>%
set("branches_k_color", value = BrBG2, k=10)
# use this if havent set the colours: dend <- color_labels(dend, k = 10)
# code is the same as:labels_colors(dend)  <- get_leaves_branches_col(dend)
p10 <- plot(dend, horiz=TRUE, axes=TRUE)
